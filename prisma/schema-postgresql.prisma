// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url       = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SELLER
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum ProductStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  RAZORPAY
  COD
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  role            UserRole   @default(CUSTOMER)
  status          UserStatus @default(ACTIVE)
  is2FAEnabled    Boolean    @default(false)
  twoFactorSecret String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  customerProfile CustomerProfile?
  sellerProfile   SellerProfile?
  adminProfile    AdminProfile?
  orders          Order[]
  cartItems       CartItem[]
  wishlistItems   WishlistItem[]
  addresses       Address[]
  otpCodes        OtpCode[]
  adminRoles      UserAdminRole[]

  @@map("users")
}

model CustomerProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth DateTime?
  gender      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("customer_profiles")
}

model SellerProfile {
  id                String             @id @default(cuid())
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName      String
  businessType      String
  gstNumber         String?
  panNumber         String?
  address           String
  city              String
  state             String
  pincode           String
  status            SellerStatus       @default(PENDING)
  rejectionReason   String?
  documents         Document[]
  products          Product[]
  orders            OrderItem[]
  productSellers    ProductSeller[]
  deliveryEstimates DeliveryEstimate[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("seller_profiles")
}

model AdminProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  department String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("admin_profiles")
}

model Document {
  id           String        @id @default(cuid())
  sellerId     String
  seller       SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  fileName     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  uploadedAt   DateTime      @default(now())

  @@map("documents")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  imageUrl    String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

model Product {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String
  brand           String
  images          String[]
  categoryId      String
  category        Category      @relation(fields: [categoryId], references: [id])
  sellerId        String
  seller          SellerProfile @relation(fields: [sellerId], references: [id])
  status          ProductStatus @default(DRAFT)
  rejectionReason String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  productSellers ProductSeller[]
  orderItems     OrderItem[]
  cartItems      CartItem[]
  wishlistItems  WishlistItem[]
  reviews        Review[]

  @@map("products")
}

model ProductSeller {
  id              String        @id @default(cuid())
  productId       String
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  sellerId        String
  seller          SellerProfile @relation(fields: [sellerId], references: [id])
  price           Decimal       @db.Decimal(10, 2)
  discountedPrice Decimal?      @db.Decimal(10, 2)
  stock           Int           @default(0)
  sku             String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@unique([productId, sellerId])
  @@map("product_sellers")
}

model CartItem {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId       String
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productSellerId String
  productSeller   ProductSeller @relation(fields: [productSellerId], references: [id], onDelete: Cascade)
  quantity        Int           @default(1)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([userId, productSellerId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String // 'billing' or 'shipping'
  firstName String
  lastName  String
  address   String
  city      String
  state     String
  pincode   String
  phone     String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("addresses")
}

model Order {
  id                String         @id @default(cuid())
  orderNumber       String         @unique
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  shippingAddressId String
  shippingAddress   Address        @relation(fields: [shippingAddressId], references: [id])
  status            OrderStatus    @default(PENDING)
  totalAmount       Decimal        @db.Decimal(10, 2)
  shippingAmount    Decimal        @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal        @default(0) @db.Decimal(10, 2)
  finalAmount       Decimal        @db.Decimal(10, 2)
  paymentStatus     PaymentStatus  @default(PENDING)
  paymentMethod     PaymentMethod?
  paymentId         String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  orderItems OrderItem[]
  payments   Payment[]

  @@map("orders")
}

model OrderItem {
  id              String        @id @default(cuid())
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  productSellerId String
  productSeller   ProductSeller @relation(fields: [productSellerId], references: [id])
  sellerId        String
  seller          SellerProfile @relation(fields: [sellerId], references: [id])
  quantity        Int
  price           Decimal       @db.Decimal(10, 2)
  discountedPrice Decimal?      @db.Decimal(10, 2)
  totalAmount     Decimal       @db.Decimal(10, 2)
  status          OrderStatus   @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("INR")
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  gatewayResponse Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     String
  rating     Int // 1-5
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, userId])
  @@map("reviews")
}

model OtpCode {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String
  purpose   String // 'login', 'registration', 'password_reset'
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("otp_codes")
}

model DeliveryEstimate {
  id            String        @id @default(cuid())
  pincode       String
  sellerId      String
  seller        SellerProfile @relation(fields: [sellerId], references: [id])
  estimatedDays Int
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([pincode, sellerId])
  @@map("delivery_estimates")
}

model AdminRole {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json // Array of permission strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userRoles UserAdminRole[]

  @@map("admin_roles")
}

model UserAdminRole {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId    String
  role      AdminRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())

  @@unique([userId, roleId])
  @@map("user_admin_roles")
}
